name: EVETrade API Dev Deployment

# Controls when the workflow will run
on:
  push:
    branches:
      - 'dev/**'

# Define the required permissions for this workflow
permissions:
  id-token: write
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test_evetrade_api:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12.1' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Install poetry
        run: python -m pip install poetry==2.0.1

      - name: Install Dependencies
        run: python -m poetry install

      - name: Cache the virtualenv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          python -m poetry install --sync -vv

      - name: Generate Lambda Layer
        run: |
          mkdir python
          mv .venv/lib/python3.12/site-packages/* python/
          zip -r evetrade-api-layer.zip python

      - name: Generate Deployment Package
        run: |
          zip -r evetrade-api-deployment.zip api

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Lambda Function and Layer
        run: |
          aws lambda update-function-code --function-name evetrade_api --zip-file fileb://evetrade-api-deployment.zip > /dev/null
          export PACKAGES=`poetry show --only main  | awk '{ printf "%s ",$1 }'`
          VERSION=$(aws lambda publish-layer-version --layer-name evetrade_api_layer --description "$PACKAGES" --compatible-runtimes python3.12 --compatible-architectures x86_64 --zip-file fileb://evetrade-api-layer.zip | jq -r '.Version')
          aws lambda update-function-configuration --function-name evetrade_api --layers arn:aws:lambda:us-east-1:130613789231:layer:evetrade_api_layer:$VERSION > /dev/null
          aws lambda list-versions-by-function --function-name evetrade_api --no-paginate --query "max_by(Versions, &to_number(to_number(Version) || '0'))" | jq -r '.Version'

